name: clang
defaults:
  run:
    shell: bash
on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux:base-devel
    steps:    
      - name: Install Dependencies
        run: |
          sudo echo -e "[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
          sudo pacman -Syu --noconfirm
          sudo pacman -S --noconfirm --needed git ninja cmake yasm nasm unzip p7zip python-pip python-cairo curl jq wget
          pip3 install -U --break-system-packages setuptools rst2pdf mako jsonschema meson
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
          git config --global --add safe.directory $PWD
      
      - uses: actions/checkout@main
      - name: Checkout toolchain
        uses: actions/checkout@main
        with:
          repository: shinchiro/mpv-winbuild-cmake
          ref: clang
          path: mpv-winbuild-cmake

      - name: Loading clang cache
        uses: actions/cache/restore@main
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/clang_root
          key: clang-${{ github.run_id }}
          restore-keys: |
            clang-
            
      - name: Loading rust toolchain cache
        uses: actions/cache/restore@main
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/install_rustup
          key: rust_toolchain-${{ github.run_id }}
          restore-keys: |
            rust_toolchain-

      - name: Building clang
        run: |
          cd mpv-winbuild-cmake
          PWD=$(pwd)
          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DALWAYS_REMOVE_BUILDFILES=ON -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/install_rustup -G Ninja -H$PWD -B$PWD/build64
          if [[ ! "$(ls -A $PWD/clang_root/bin)" ]]; then
              ninja -C $PWD/build64 llvm && ninja -C $PWD/build64 llvm-clang
          fi

      - name: Building rustup toolchain
        continue-on-error: true
        run: |
          cd mpv-winbuild-cmake
          PWD=$(pwd)
          cmake -DTARGET_ARCH=x86_64-w64-mingw32 -DCOMPILER_TOOLCHAIN=clang -DCMAKE_INSTALL_PREFIX=$PWD/clang_root -DALWAYS_REMOVE_BUILDFILES=ON -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -DRUSTUP_LOCATION=$PWD/install_rustup -G Ninja -H$PWD -B$PWD/build64
          if [[ ! "$(ls -A $PWD/install_rustup/.cargo/bin)" ]]; then
              ninja -C $PWD/build64 rustup
          fi

      - name: Packaging toolchain
        run: |
          7z a clang.7z mpv-winbuild-cmake/clang_root/*
          7z a rustup.7z mpv-winbuild-cmake/install_rustup/*
          
      - name: Release clang
        continue-on-error: true
        uses: softprops/action-gh-release@master
        with:
          tag_name: toolchain
          name: toolchain
          files: clang.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release rustup
        continue-on-error: true
        uses: softprops/action-gh-release@master
        with:
          tag_name: toolchain
          name: toolchain
          files: rustup.7z
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Cleaning rust toolchain directory
        if: ${{ always() }}
        run: |
          ninja -C mpv-winbuild-cmake/build64 cargo-clean
          
      - name: Saving clang cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/clang_root
          key: clang-${{ github.run_id }}

      - name: Saving rust toolchain cache
        uses: actions/cache/save@main
        if: always()
        with:
          path: ${{ github.workspace }}/mpv-winbuild-cmake/install_rustup
          key: rust_toolchain-${{ github.run_id }}
  
